# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

(return 0 >/dev/null 2>&1) || {
    echo >&2 "$0 is a library only meant to be sourced."
    exit 1
}

# This is only meant to be sourced by mycmd-lib
if [[ -z "${_MYCMD_LIB-}" ]]; then
    echo >&2 "$0 is a library only meant to be sourced by mycmd-lib."
    exit 1
fi

[[ -n "${_MYCMD_LOCAL_LIB:-}" ]] && return
readonly _MYCMD_LOCAL_LIB=1

readonly _MYCMD_LOCAL_LIB_SELF_FILE="${BASH_SOURCE[0]}"

# Local definitions for MCYMD_BIN
function mycmd_local.init_bin() {
    local -r command=$1

    [[ -v MYCMD_BIN["${command}"] ]] && {
        mycmd.debug "'${command}' already defined at '${MYCMD_BIN["${command}"]}'"
        return 0
    }

    local -r cargo_bin="${HOME}/.cargo/bin"

    # local command_path
    case "${command}" in
        "financial-importer")
            local importer_path="${cargo_bin}/financial-importer"
            if [[ -x "${importer_path}" ]]; then
                MYCMD_BIN["${command}"]="${importer_path}"
            fi
            ;;

        "pricesdb-updater")
            local updater_path="${cargo_bin}/pricesdb-updater"
            if [[ -x "${updater_path}" ]]; then
                MYCMD_BIN["${command}"]="${updater_path}"
            fi
            ;;

        *)
            # Do nothing
            ;;
    esac

    # shellcheck disable=SC2154
    case "${command}+${_MYCMD_OS}" in
        *)
            # Do nothing, the fallback is in `mycmd.init_mycmd_bin`
            return 0
            ;;
    esac
}

mycmd.trace "${_MYCMD_LOCAL_LIB_SELF_FILE} sourcing complete."
